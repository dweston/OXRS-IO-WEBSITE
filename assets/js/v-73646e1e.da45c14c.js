"use strict";(self.webpackChunkoxrs_docs_site=self.webpackChunkoxrs_docs_site||[]).push([[9644],{2266:(e,i,r)=>{r.r(i),r.d(i,{data:()=>l});const l={key:"v-73646e1e",path:"/docs/libraries/",title:"Libraries",lang:"en-US",frontmatter:{tags:[""]},excerpt:"",headers:[{level:2,title:"Introduction",slug:"introduction",children:[{level:3,title:"OXRS-SHA-RACK32-ESP32-LIB",slug:"oxrs-sha-rack32-esp32-lib",children:[]},{level:3,title:"OXRS-SHA-IOHandler-ESP32-LIB",slug:"oxrs-sha-iohandler-esp32-lib",children:[]},{level:3,title:"OXRS-IO-API-ESP32-LIB",slug:"oxrs-io-api-esp32-lib",children:[]},{level:3,title:"OXRS-IO-MQTT-ESP32-LIB",slug:"oxrs-io-mqtt-esp32-lib",children:[]},{level:3,title:"OXRS-IO-LCD-ESP32-LIB",slug:"oxrs-io-lcd-esp32-lib",children:[]}]}],filePathRelative:"docs/libraries/README.md",git:{updatedTime:1638825384e3,contributors:[{name:"Ben Jones",email:"ben.jones12@gmail.com",commits:4},{name:"Aaron Knox",email:"aaron_knox@me.com",commits:1},{name:"austinscreations",email:"70245481+austinscreations@users.noreply.github.com",commits:1},{name:"moinmoin-sh",email:"53935853+moinmoin-sh@users.noreply.github.com",commits:1}]}}},3126:(e,i,r)=>{r.r(i),r.d(i,{default:()=>T});var l=r(6252);const a=(0,l.uE)('<h1 id="libraries" tabindex="-1"><a class="header-anchor" href="#libraries" aria-hidden="true">#</a> Libraries</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Several libraries have been created to support the OXRS eco-system with the goal to minimise the effort in writing new firmware for OXRS compatible hardware.</p><p>The diagram below shows how the libraries relate to each other;</p><p><img src="/images/OXRS-SW-Structure.jpg" alt="OXRS Libraries"></p>',5),t={id:"oxrs-sha-rack32-esp32-lib",tabindex:"-1"},s=(0,l._)("a",{class:"header-anchor",href:"#oxrs-sha-rack32-esp32-lib","aria-hidden":"true"},"#",-1),o=(0,l.Uk)(),n={href:"https://github.com/SuperHouse/OXRS-SHA-Rack32-ESP32-LIB",target:"_blank",rel:"noopener noreferrer"},d=(0,l.Uk)("OXRS-SHA-RACK32-ESP32-LIB"),h=(0,l.Uk)("Helper library for firmware designed to run on the "),c=(0,l.Uk)("Rack32"),u=(0,l.Uk)(" controller"),m=(0,l._)("li",null,"Handles initialisation and polling for ethernet, MQTT, API and LCD libraries",-1),p={id:"oxrs-sha-iohandler-esp32-lib",tabindex:"-1"},b=(0,l._)("a",{class:"header-anchor",href:"#oxrs-sha-iohandler-esp32-lib","aria-hidden":"true"},"#",-1),f=(0,l.Uk)(),S=(0,l.Uk)("OXRS-SHA-IOHandler-ESP32-LIB"),_=(0,l._)("ul",null,[(0,l._)("li",null,"Decodes inputs from various devices like switches, buttons, rotary encoders and more"),(0,l._)("li",null,"Keeps track of output state and handles interlocking and timers"),(0,l._)("li",null,"Typically used with MCP23017 I/O expanders")],-1),k={id:"oxrs-io-api-esp32-lib",tabindex:"-1"},O=(0,l._)("a",{class:"header-anchor",href:"#oxrs-io-api-esp32-lib","aria-hidden":"true"},"#",-1),g=(0,l.Uk)(),I=(0,l.Uk)("OXRS-IO-API-ESP32-LIB"),x=(0,l._)("ul",null,[(0,l._)("li",null,"REST API for device configuration"),(0,l._)("li",null,"Web UI for device configuration"),(0,l._)("li",null,"OTA upload of firmware updates")],-1),R={id:"oxrs-io-mqtt-esp32-lib",tabindex:"-1"},w=(0,l._)("a",{class:"header-anchor",href:"#oxrs-io-mqtt-esp32-lib","aria-hidden":"true"},"#",-1),L=(0,l.Uk)(),P=(0,l.Uk)("OXRS-IO-MQTT-ESP32-LIB"),y=(0,l._)("ul",null,[(0,l._)("li",null,"Maintains MQTT connection"),(0,l._)("li",null,"Decodes JSON config & command payloads and passes them to your firmware for handling"),(0,l._)("li",null,"Provides a simple API for publishing JSON status and telemetry data")],-1),v={id:"oxrs-io-lcd-esp32-lib",tabindex:"-1"},A=(0,l._)("a",{class:"header-anchor",href:"#oxrs-io-lcd-esp32-lib","aria-hidden":"true"},"#",-1),X=(0,l.Uk)(),E=(0,l.Uk)("OXRS-IO-LCD-ESP32-LIB"),U=(0,l._)("ul",null,[(0,l._)("li",null,"Common status display for OXRS compatible controller with a LCD"),(0,l._)("li",null,"Animated display of the I/O port status")],-1),T={render:function(e,i){const r=(0,l.up)("OutboundLink"),T=(0,l.up)("RouterLink");return(0,l.wg)(),(0,l.iD)(l.HY,null,[a,(0,l._)("h3",t,[s,o,(0,l._)("a",n,[d,(0,l.Wm)(r)])]),(0,l._)("ul",null,[(0,l._)("li",null,[h,(0,l.Wm)(T,{to:"/docs/hardware/controllers/rack32.html"},{default:(0,l.w5)((()=>[c])),_:1}),u]),m]),(0,l._)("h3",p,[b,f,(0,l.Wm)(T,{to:"/docs/libraries/esp32-io-handler-library.html"},{default:(0,l.w5)((()=>[S])),_:1})]),_,(0,l._)("h3",k,[O,g,(0,l.Wm)(T,{to:"/docs/libraries/esp32-api-library.html"},{default:(0,l.w5)((()=>[I])),_:1})]),x,(0,l._)("h3",R,[w,L,(0,l.Wm)(T,{to:"/docs/libraries/esp32-mqtt-library.html"},{default:(0,l.w5)((()=>[P])),_:1})]),y,(0,l._)("h3",v,[A,X,(0,l.Wm)(T,{to:"/docs/libraries/esp32-lcd-library.html"},{default:(0,l.w5)((()=>[E])),_:1})]),U],64)}}}}]);